[-]======================================[-]
    SQL injection
[-]======================================[-]


- ---] References
======================

# NICE cheatsheet
https://portswigger.net/web-security/sql-injection/cheat-sheet

# Recommended SQLi video
https://www.youtube.com/watch?v=1nJgupaUPEQ

# OSCP SQLi Notes
https://notchxor.github.io/oscp-notes/2-web/sqli/

# Payload all the things - SQL injections cheat sheet
https://github.com/swisskyrepo/PayloadsAllTheThings/tree/master/SQL%20Injection

# Manual SQL Injection walkthrough
https://sushant747.gitbooks.io/total-oscp-guide/content/sql-injections.html



- ---] Overview
======================
                                                                                                                                 
                           SQL Injection                         
                              |       |                          
                              |       |                          
                              +       +                          
             +-----------------   |   +-----------------         
             |                    |                    |         
             |                    |                    |         
             |                    |                    |         
             |                    |                    |         
             |                    |                    |         
             |                    |                    |         
             |                    |                    |         
 In-Band (Classic SQLi)      Blind SQLI           Out-Of-Band    
      |          |            |      |                           
      |          |            |      |                           
      +          +            +      +                           
   Error        Union      Boolean  Time                    



- -] Error-Based: 
----------------
Force the database to generate an error, giving you more information on how things operate on the backend. A single quote might break the backend query, and generate an error at the application level. This might show you the version of the backend or the exact query.

- -] Union-based
----------------
A technique that leverages the union operator that combines the results of two queries, into a single result set. We output the result of what the application makes, and whatever we choose using the union operator. 


- -] Inferential (Blind)
----------------
A blind SQLi vulnerability means there is no transfer of data via the application. We are stuck asking the application asking true or false injections with Boolean, or using time injection in order to determine what you're asking is correct within the database or not. These are a bit more difficult, however the impact of exploiting the vulnerability is just as bad as in-band / classic SQLi.

- -] Boolean
----------------
Boolean-Based Blind SQLI is a blind SQLi technique taht uses Boolean conditions to return a different result depending on whether the query returns a TRUE or FALSE result.

- -] Time
----------------
Time-based SQLi is a blind SQLi technique that relies on the database pausing for a specified amount of time, then returning the results, indicating a successful SQL query execution.

- This can't really be done manual. This will have to be scripted with python, measuring the response time.

Example:
    If the first character of the administrator's hashed password is an 'a', wait 10 seconds. 
        --> Response takes 10 seconds --> first letter is 'a' --> Next letter
        --> Response doesn't take 10 seconds --> first letter is not 'a' --> Next letter


- -] Out-Of-Band
----------------
This occurs when the attackers is unable to use the same channel to launch the attack and gather the results of the attack. It usually relies on the ability for the application to make a network connection, for example a DNS or HTTP request, to deliever data to an attacker. This can also be used in Classic Sqli or Blind SQLi, however we seperated it here.



- ---] Testing
================

- Map the application 
    + (Visit the URL, walk through the pages accessible, make note of input vectors that talk to the backend, understand how it functions and the logic, enumerate directories,)
    + Burpsuite can passively monitor all of this while your browse and test.

- Fuzz the application
    + Submit SQL-specific characters such as ' or ", and look for errors or anomalies
    + Submit Boolean conditions such as OR1=1 and OR 1=2, and look for differences in the application's response
    + Submit payloads designed to trigger time delays when executed within a SQL query, and look for differences in the time taken to respond.
    + Submit OAST (out-of-band_ payloads, designed to trigger an OOB networking interaction when executed within an SQL query, and monitor for any resulting interactions.


- ---] Exploiting Union-Based SQLi
======================

There are two rules for combining the result sets of two queries by using UNION:
    + The number and the order of the columns must be the same in all queries
    + The data types must be compatible (Query the application is making vs the query you are making)

   [00] Exploitation:
        -------------
        + Figure out the number of columns that the query is making
        + Figure the data types of columns (Mainly interested in string data)
        + Use the UNION opereator to output information from the database

   [01] Determining the number of columns:
        ---------------------------------
        + Incrementally inject a series of ORDER BY clauses until you get an error or observe a different behaviour in the application
            - order by 1--
            - order by 2--
            - order by 3--

            (The ORDER BY position number 3 is out of range and the number of items in the select list) Meaning 2 columns are being used.

        -----------------------------------------------------

        + Determining the number of columns required in an SQL injection UNION attack using NULL VALUES;
        + Incrementally inject a series of UNION SELECT payloads specifying a different number of null values until you no longer get an error
            - ' UNION SELECT NULL--

            (All queries combined using a UNION, INTERSECT or EXCEPT operator must have an equal number of express in their target lists.) This error means we need to increase the NULL value.

    [02] Finding columns with a useful data type:
         ---------------------------------------
        + Probe each column to test wheter it can hold string data by submitting a series of UNION SELECT payloads that place a string value into each column in turn.
        + Simply move down the number of columns
            - ' UNION SELECT 'a', NULL--
            - ' UNION SELECT NULL, 'a' --
            (Do we get an error stating it's not string data type?)
            



- ---] Summary
======================

# For manual injections, UNION injections are something you want to understand.

# With UNION injections, both select statements MUSIT return the same number of columns. If you dont know, keep adding columns (example below) unitil it works, else use a sleep statement which you know worked after it's completed.
	
        # Increasing one column each request, until our @@version payload is successful. Columns 1,2,3 etc are just padding.
	' UNION select 1,2,@@version -- -
	' UNION select 1,2,3,@@version -- -
	' UNION select 1,2,3,4,@@version -- -

	# Another method is using delays.



- ---] Quick Commands
======================

#quick
' or 1=1 -- -

#quick 
'select * from users where username=' or 1=1

#quick 
'OR 1 OR'


- ---] Related Commands
======================

